package controlPanel;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class BillboardControlTest {

    /* Test 0: Declaring BillboardControl object
     * Description: BillboardControl object should be running in background on application start.
     * Expected Output: BillboardControl object is declared
     */
    BillboardControl billboardControl;

    /* Test 1: Constructing a BillboardControl object
     * Description: BillboardControl Object should be able to be created on logged in user request from control panel
     * Expected Output: BillboardControl object is instantiated from BillboardControl class
     */
    @BeforeEach
    @Test
//    public void setUpBillboardControl() {
//      billboardControl = new BillboardControl();
//    }


    /* Test 2: Request to server to create Billboard (Success)
     * Description: Method to request server to create a new sample billboard from a given xmlCode.
     *              Assume sessionToken is valid. xmlCode is a variable that stores the xmlCode either loaded in or
     *              autogenerated.
     * Expected Output: A positive reply from Server noting the success of request
     * // TODO: Define what sessionToken might look like:
     *     *****ASK*****
     *          ALSO NOT TOO SURE IF WE WANT SAMPLETOKEN FOR EACH
     *          Check Server response variable and where we should store it
     */
//    public void createABillboardRequest(){
//        billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertTrue(serverResponse);
//    }


    /* Test 3: Request to server to create Billboard (Fail)
     * Description: Method to request server to create a new sample billboard from a given xmlCode. Expect Fail due to
     *              Invalid Name (same name). Assume sessionToken is valid.
     * Expected Output: A negative reply from Server noting the failure of request
     * // TODO: Define what sessionToken might look like
     */
//    public void createSameNameBillboardRequest(){
//        billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertFalse(serverResponse);
//    }


    /* Test 4: Request to server to edit a billboard (Success)
     * Description: Method to request server to edit a billboard. Need to have suffice userpermission to edit said
     *              board and user needs to provide a new xmlCode. Assume sessionToken is valid.
     * Expected Output: A positive reply from Server noting the success of request
     */
//    public void editABillboardRequest(){
//        billboardControl.editBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertTrue(serverResponse);
//    }


    /* Test 5: Request to server to edit a billboard (Fail)
     * Description: Method to request server to edit a billboard. Need to have suffice userpermission to edit said
     *              board and user needs to provide a new xmlCode. Assume sessionToken is valid. Fail due to insuffice
     *              permission or board cannot be edited (does not exists).
     * Expected Output: A negative reply from Server noting the failure of request
     */
//    public void editABillboardRequest(){
//        billboardControl.editBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertFalse(serverResponse);
//    }


    /* Test 6: Request to server to delete a billboard (Success)
     * Description: Method to request a server to delete a billboard. Assume sessionToken is valid, and target exists.
     * Expected Output: A positive reply from server of successful deletion (boolean).
     */
//    public void deleteABillboardRequest(){
//        billboardControl.deleteBillboardRequest("sampleSessionToken","Billboard1");
//        assertTrue(serverResponse);
//    }


    /* Test 7: Request to server to delete a billboard (Fail)
     * Description: Method to request a server to delete a billboard. Assume sessionToken is valid. The method will
     *              Fail due to insuffice permission or billboard does not exists
     * Expected Output: A negative reply from server of failure to delete (boolean).
     */
//    public void deleteABillboardRequest(){
//        billboardControl.deleteBillboardRequest("sampleSessionToken","Billboard1");
//        assertTrue(serverResponse);
//    }


    /* Test 8: Request to server to list billboards (Success)
     * Description: Method to request to server to list all billboards. Assume sessionToken is valid. Returns an array
     *              list of billboards
     * Expected Output: A server response with the list of billboard as an array containing billboard names.
     */
//    public void listAllBillboardRequest(){
//        billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        billboardControl.createBillboardRequest("sampleToken", "Billboard2", xmlCode);
//        billboardControl.createBillboardRequest("sampleToken", "Billboard3", xmlCode);
//        assertEquals(serverResponse, billboardControl.listBillboardRequest(),
//                "Listing not alphabetical");
//    }


    /* Test x: Request to server to
     * Description:
     * Expected Output:
     */
    public void getBillboardInformationRequest(String sessionToken, String billboardName){

    }



}