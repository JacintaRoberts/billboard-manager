package controlPanel;

class BillboardControlTest {

    /* Test 0: Declaring BillboardControl object
     * Description: BillboardControl object should be running in background on application start.
     * Expected Output: BillboardControl object is declared
     */
    BillboardControl billboardControl;

    /* Test 1: Constructing a BillboardControl object
     * Description: BillboardControl Object should be able to be created on logged in user request from control panel
     * Expected Output: BillboardControl object is instantiated from BillboardControl class
     */
//    @BeforeEach
//    @Test
//    public void setUpBillboardControl() {
//      billboardControl = new BillboardControl();
//    }


    /* Test 2: Request to server to create Billboard (Success)
     * Description: Method to request server to create a new sample billboard from a given xmlCode.
     *              Assume sessionToken is valid. xmlCode is a variable that stores the xmlCode either loaded in or
     *              autogenerated.
     * Expected Output: A positive reply from Server noting the success of request
     */
//    @Test
//    public void createABillboardRequest(){
//        String serverResponse = billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertEquals(serverResponse, "Billboard Created!");
//    }


    /* Test 3: Request to server to create Billboard (Exception Handling)
     * Description: Method to request server to create a new sample billboard from a given xmlCode. Expect Fail due to
     *              Invalid Name (same name). Assume sessionToken is valid.
     * Expected Output: A negative reply from Server noting the failure of request
     */
//    @Test
//    public void createSameNameBillboardRequest(){
//        String serverResponse = billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertEquals(serverResponse, "Billboard Name Taken");
//        assertThrows(SameBillboardNameException);
//    }


    /* Test 4: Request to server to create Billboard (Exception Handling)
     * Description: Method to request server to create a new sample billboard from a given xmlCode. Expect Fail due to
     *              Invalid Name (Illegal Characters). Assume sessionToken is valid.
     * Expected Output: A negative reply from Server noting the failure of request
     */
//    @Test
//    public void createIllegalNameBillboardRequest(){
//        String serverResponse = billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertEquals(serverResponse, "Billboard Contains Illegal Character");
//        assertThrows(IllegalBillboardNameException);
//    }


    /* Test 5: Request to server to edit a billboard (Success)
     * Description: Method to request server to edit a billboard. Need to have suffice user permission to edit said
     *              board and user needs to provide a new xmlCode. Assume sessionToken is valid.
     * Expected Output: A positive reply from Server noting the success of request
     */
//    @Test
//    public void editABillboardRequest(){
//        String serverResponse = billboardControl.editBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertEquals(serverResponse, "Billboard Edited");
//    }


    /* Test 6: Request to server to edit a billboard (Exception Handling)
     * Description: Method to request server to edit a billboard. Need to have suffice user permissions to edit said
     *              board and user needs to provide a new xmlCode. Assume sessionToken is valid. Fail due to insufficient
     *              permission
     * Expected Output: A negative reply from Server noting the failure of request
     */
//    @Test
//    public void editABillboardRequest(){
//        String serverResponse = billboardControl.editBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertEquals(serverResponse, "No User Permission");
//        assertThrows(NoUserPermissionException);
//    }


    /* Test 7: Request to server to edit a billboard (Exception Handling)
     * Description: Method to request server to edit a billboard. Need to have suffice user permissions to edit said
     *              board and user needs to provide a new xmlCode. Assume sessionToken is valid. Fail due to insufficient
     *              board cannot be edited (does not exists).
     * Expected Output: A negative reply from Server noting the failure of request
     */
//    @Test
//    public void editABillboardRequest(){
//        String serverResponse = billboardControl.editBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        assertEquals(serverResponse, "Billboard Does not Exist");
//        assertThrows(NoBillboardException);
//    }


    /* Test 8: Request to server to delete a billboard (Success)
     * Description: Method to request a server to delete a billboard. Assume sessionToken is valid, and target exists.
     * Expected Output: A positive reply from server of successful deletion .
     */
//    @Test
//    public void deleteABillboardRequest(){
//        String serverResponse = billboardControl.deleteBillboardRequest("sampleSessionToken","Billboard1");
//        assertEquals(serverResponse, "Billboard Deleted");
//    }


    /* Test 9: Request to server to delete a billboard (Exception Handling)
     * Description: Method to request a server to delete a billboard. Assume sessionToken is valid. The method will
     *              Fail due to  billboard does not exists
     * Expected Output: A negative reply from server of failure to delete.
     */
//    @Test
//    public void deleteABillboardRequest(){
//        String serverResponse = billboardControl.deleteBillboardRequest("sampleSessionToken","Billboard1");
//        assertEquals(serverResponse, "Billboard does not exist");
//        assertThrows(NoBillboardException);
//    }


    /* Test 10: Request to server to delete a billboard (Exception Handling)
     * Description: Method to request a server to delete a billboard. Assume sessionToken is valid. The method will
     *              throw an exception due to insufficient permissions
     * Expected Output: A negative reply from server of failure to delete.
     */
//    @Test
//    public void deleteABillboardRequest(){
//        String serverResponse = billboardControl.deleteBillboardRequest("sampleSessionToken","Billboard1");
//        assertEquals(serverResponse, "No User Permission");
//        assertThrows(NoUserPermissionException);
//    }


    /* Test 11: Request to server to list billboards (Success)
     * Description: Method to request to server to list all billboards. Assume sessionToken is valid. Returns an array
     *              list of billboards
     * Expected Output: A server response with the list of billboard as an array containing billboard names.
     */
//    @Test
//    public void listAllBillboardRequest(){
//        billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        billboardControl.createBillboardRequest("sampleToken", "Billboard2", xmlCode);
//        billboardControl.createBillboardRequest("sampleToken", "Billboard3", xmlCode);
//        List<String> testBillboardList = new ArrayList<String>();
//        testBillboardList.add("Billboard1");
//        testBillboardList.add("Billboard2");
//        testBillboardList.add("Billboard3");
//        billboardList billboardList = billboardControl.listBillboardRequest("sessionToken");
//        assertArrayEquals(testBillboardList ,billboardList);
//    }


    /* Test 12: Request to server to list billboards (Exception Handling)
     * Description: Method to request to server to list all billboards. Assume sessionToken is valid. Fails because
     *              there is no billboard to return
     * Expected Output: Fail message and raise exception.
     */
//    @Test
//    public void listAllBillboardRequest(){
//        billboardList billboardList = billboardControl.listBillboardRequest("sessionToken");
//        assertTrue(billboardList.length == 0);
//        assertThrows(EmptyBillboardListException);
//    }


    /* Test 13: Request to server to get billboard information (Success)
     * Description: A method to request billboard information of a given billboard - Information provided will include
     *              information such as billboardName, Creator, xmlCode.
     * Expected Output: Return of billboard information such as billboardName, Creator, xmlCode
     */
//    @Test
//    public void getABillboardInformationRequest(){
//        billboardControl.createBillboardRequest("sampleToken", "Billboard1", xmlCode);
//        BillboardInformation billboardInformation = getBillboardInformationRequest("sessionToken","Billboard1");
//        assertAll("Should return details of Given Billboard",
//                () -> assertEquals("Billboard1", billboardInformation.getBillboardName()),
//                () -> assertEquals("CAB302", billboardInformation.getBillboardCreator()),
//                () -> assertEquals(xmlCode, billboardInformation.getBillboardXML())
//        );
//    }


    /* Test 14: Request to server to get billboard information (Exception Handling)
     * Description: A method to request billboard information of a given billboard - Information provided will include
     *              information such as billboardName, Creator, xmlCode. The method will fail because
     *              billboard does not exist
     * Expected Output: Return failure of return
     */
//    @Test
//    public void getABillboardInformationRequest(){
//        BillboardInformation billboardInformation = getBillboardInformationRequest("sessionToken","Billboard500");
//        assertTrue(billboardInformation.length == 0);
//        assertThrows(NoBillboardException);
//    }

}